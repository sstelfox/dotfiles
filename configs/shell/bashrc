# ~/.bashrc
#
# Configuration for interactive non-login shells. Contains shell customizations that enhance the
# interactive experience. Since this may be sourced multiple times, avoid expensive operations.
#
# Configuration that should exist here:
#
# * Command aliases
# * Shell functions
# * Prompt customization
# * Command completion settings
# * Shell options (history, etc.)

# TODO: Should untangle bash_profile and bashrc configurations

# I may want to remove this in the future, but for now if there is a system wide configuration we'll
# use it as our configuration starting point. MacOS actually does some neat stuff in their
# system-wide script including per-application shell configuration, save/restoring shell sessions,
# and history recording (weak auditing).
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

# Setup my private shell library
__DOTFILE_ROOT="${HOME}/.dotfiles"
. "${__DOTFILE_ROOT}/lib/shim.sh.inc"

__SHELL_CFG_ROOT="${__DOTFILE_ROOT}/configs/shell"

# Common should always precede a specific shell to allow for specific overrides, though
# incompatibilities like that should instead be pulled into the speecific relevant shells instead
# of being overwritten.
. "${__SHELL_CFG_ROOT}/common.sh.inc"

. "${__SHELL_CFG_ROOT}/bash/shell_prompt.sh.inc"

# The termux environment really doesn't like something in the legacy configs...
if [ "$(_plc detect_os)" != "termux" ]; then
  . "${__SHELL_CFG_ROOT}/legacy_bashrc"
fi
