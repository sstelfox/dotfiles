#!/bin/sh

set -eu

if git rev-parse --verify HEAD >/dev/null 2>&1; then
  COMMIT_REFERENCE=HEAD
else
  # Initial commit: diff against an empty tree object
  COMMIT_REFERENCE=$(git hash-object -t tree /dev/null)
fi

PRECOMMIT_CHECK_FAILED="false"
OVERRIDE_PRECOMMIT="${OVERRIDE_PRECOMMIT:-false}"

# Redirect all output to STDERR
exec 1>&2

# Diagnostic function allowing the confirmation that failures are working in the global git hooks
always_fail() {
  echo "Precommit Error 000: Test failure triggered"
  PRECOMMIT_CHECK_FAILED=true
}

fix_trailing_whitespace() {
  # Pass the files present in the commit to sed to strip trailing whitespace
  git diff-index --cached --name-only ${COMMIT_REFERENCE} | xargs sed -i 's/[[:space:]]*$//'

  # Update the outstanding changes in our commit
  git add -u
}

# Checks whether it is safe to attempt to automatically fix trailing whitespace. If this passes by
# returning and exit status of 0, the appropriate fix function will be called.
is_trailing_whitespace_fix_safe() {
  # If this is a partial commit of the outstanding changes, we won't be able to necessarily add our
  # whitespace fixes selectively to the pending commit.
  if [ -n "$(git status --porcelain)" ]; then
    echo "!> Unable to automatically fix trailing whitespace with unstaged changes present"
    return 1
  fi

  # Passed our checks, safe to auto-fix
  return 0
}

# Whitespace at the end of files can be invisible, problematic, and frankly rude.
#
# This relies on the git built in `--check` mechanism which is controlled by the `core.whitespace`
# git config parameter.
reject_trailing_whitespace() {
  if ! git diff-index --check --cached ${COMMIT_REFERENCE} -- >/dev/null 2>&1; then
    echo "Precommit Error 001: Found trailing whitespace"

    if is_trailing_whitespace_fix_safe; then
      echo "-> Attempting to automatically correct..."
      fix_trailing_whitespace

      # Perform a re-check, if it passes we can bail out early as the issue isn't present anymore
      if git diff-index --check --cached ${COMMIT_REFERENCE} -- >/dev/null 2>&1; then
        echo "-> Whitespace removed, continuing with commit"
        return 0
      fi
    fi

    echo "-> Files with trailing whitespace:"
    git diff-index --check --cached ${COMMIT_REFERENCE} -- || true

    PRECOMMIT_CHECK_FAILED=true
  fi
}

# Cross platform projects tend to avoid non-ASCII filenames, validate they aren't present.
#
# If you want to allow non-ASCII filenames set this variable to true in the specific repository
# where they're needed. The global default I'll use is to err on the side of interoperability.
reject_nonascii_filenames() {
  local allow_non_ascii=$(git config --type=bool hooks.allownonascii)

  if [ "${allow_non_ascii}" != "true" ]; then
    # This exploits the fact that the printable range starts at the space character and ends with
    # tilde. The use of brackets around a tr range is ok here, (it's even required, for portability
    # to Solaris 10's tr), since the square bracket bytes happen to fall in the designated range.
    local nonascii_char_count=$(git diff --cached --name-only --diff-filter=A -z ${COMMIT_REFERENCE} |
      LC_ALL=C tr -d '[ -~]\0' |
      wc -c |
      awk '{ print $1 }')

    if [ "${nonascii_char_count}" != 0 ]; then
      echo "Precommit Error 002: Found non-ASCII file name in cached changes '${nonascii_char_count}'"
      PRECOMMIT_CHECK_FAILED="true"
    fi
  fi
}

# Check if my shell library is available, if so we can do additional checks and chain into a repo's
# own pre-commit hooks if they're setup.
if declare -f ,plc >/dev/null; then
  # Just a placeholder for now
  echo "Detected root of current git repo: $(,plc current_git_root)"
fi

# Choose which of our triggered checks to run
#always_fail
reject_nonascii_filenames
reject_trailing_whitespace

if [ "${OVERRIDE_PRECOMMIT}" = "false" -a "${PRECOMMIT_CHECK_FAILED}" != "false" ]; then
  echo
  echo "Commit rejected due too one or more precommit check failures"
  exit 1
fi
