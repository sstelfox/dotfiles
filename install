#!/bin/bash

# This file replaces various dotfiles in the user's home directory
# it makes some assumptions about what's installed such as vim, bash,
# git, bash-completion, and tmux.
#
# The original files are stored in $HOME/.dotfiles/system-originals/
# if they existed for reference. This folder is not included in the
# repository and as such will not migrate between machines

FILES=( bashrc bash_profile ctags gitconfig gnupg muttrc sqliterc ssh tmux.conf toprc vim vimrc )

DOTFILE_DIR="$HOME/.dotfiles"

# This function takes a filename (without the preceding .) and backs
# it up before installing a symbolic link to the repository version
function backup_and_install {
  echo "Installing $1..."

  if [ -e "$HOME/.$1" ]; then
    # If it's a link just delete it
    if [ -h "$HOME/.$1" ]; then
      rm -f $HOME/.$1
    elif [ -d "$HOME/.$1" -o -f "$HOME/.$1" ]; then
      mv $HOME/.$1 $DOTFILE_DIR/system-originals/$1
    else
      echo "\tFound inode type this installer isn't aware of. Skipping install"
      return 1
    fi
  fi

  ln -s $HOME/.dotfiles/$1 $HOME/.$1
}

for DOTFILE in ${FILES[@]}; do
  backup_and_install $DOTFILE
done

# Check to see if we need to move SSH keys back
if [ -d "$DOTFILE_DIR/system-originals/ssh" ]; then
  if [ -f "$DOTFILE_DIR/system-originals/ssh/id_rsa" -a -f "$DOTFILE_DIR/system-originals/ssh/id_rsa.pub" ]; then
    echo "Found SSH keys. Bringing them into the dotfiles..."
    mv $DOTFILE_DIR/system-originals/ssh/id_rsa* $DOTFILE_DIR/ssh/
  fi

  if [ -f "$DOTFILE_DIR/system-originals/ssh/known_hosts" ]; then
    echo "Found existing known host file. Bringing into the dotfiles..."
    mv $DOTFILE_DIR/system-originals/ssh/known_hosts $DOTFILE_DIR/ssh/
  fi

  if [ -f "$DOTFILE_DIR/system-originals/ssh/authorized_keys" ]; then
    echo "Found existing authorized keys file. Bringing into the dotfiles..."
    mv $DOTFILE_DIR/system-originals/ssh/authorized_keys $DOTFILE_DIR/ssh/
  fi
fi

# Generate our SSH config
${DOTFILE_DIR}/ssh/build_config.sh

for cfg_segment in $(ls $DOTFILE_DIR/ssh/shared-config/* 2>/dev/null | sort); do
  cat ${cfg_segment} >> ${DOTFILE_DIR}/ssh/config
  echo >> ${DOTFILE_DIR}/ssh/config
done

for cfg_segment in $(ls $DOTFILE_DIR/ssh/system-config/* 2>/dev/null | sort); do
  cat ${cfg_segment} >> ${DOTFILE_DIR}/ssh/config
  echo >> ${DOTFILE_DIR}/ssh/config
done

chmod -R u=rwX,g=rX,o= ${DOTFILE_DIR}
chmod -R u=rwX,g=,o= ${DOTFILE_DIR}/{gnupg,ssh}

if which fc-cache &> /dev/null; then
  echo "Installing fonts and updating font cache..."
  fc-cache &> /dev/null
fi

# Switch to the authenticated access for my dotfiles, I most likely cloned over
# the public HTTPS endpoint to get these here. Leave a noauth version in case I
# want to update without creds available...
(cd ~/.dotfiles/; git remote set-url origin git@github.com:sstelfox/dotfiles.git)
(cd ~/.dotfiles/; git remote | grep -q noauth || git remote add noauth https://github.com/sstelfox/dotfiles.git)

# Installing the git hooks just requires git to be reinitialized after we have
# our global config
#echo "Installing git hooks..."
#git --git-dir=$HOME/.dotfiles init

pushd $DOTFILE_DIR > /dev/null

# Mark the git file as untracked locally so we can make changes without
# affecting what's in the repo
git update-index --assume-unchanged system-specific/git-user-info.sh

popd > /dev/null

# Don't believe this is necessary anymore
echo "Installing VIM plugins..."
vim +PlugInstall +PlugUpdate +qa

echo "Sourcing new bash profile..."
# Start using the new profile :)
source $HOME/.bash_profile

echo "Done."
